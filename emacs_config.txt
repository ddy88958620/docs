;;设置HOME路径
(setenv "HOME" "C:/Tools/emacs")
;;(setenv "EMACS_SERVER_FILE" "C:/Tools/emacs/.emacs.d/server/server")

;;设置字体
;;Setting English Font
(set-face-attribute 'default nil :font "Monaco 9")  
;;Chinese Font 
(dolist (charset '(kana han symbol cjk-misc bopomofo))   
(set-fontset-font (frame-parameter nil 'font) 
          charset (font-spec :family "Yahei Consolas Hybird" :size 9)))


;;不显示启动页面   
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ecb-layout-window-sizes nil)
 '(ecb-options-version "2.40")
 '(inhibit-startup-screen t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;;Color Theme 
(add-to-list 'load-path "~/.emacs.d/color-theme") 
(require 'color-theme) 
(color-theme-initialize) 
;;(color-theme-gnome2)
(color-theme-ld-dark)

;;启动单进程Server
(server-start)

;;启动自动最大化(数据自己调整，注意格式，如(top . 0)，圆点前后都要留有空格)
(defun w32-restore-frame () 
"Restore a minimized frame" 
(interactive) 
(w32-send-sys-command 61728)) 

(defun w32-maximize-frame () 
"Maximize the current frame" 
(interactive) 
(w32-send-sys-command 61488)) 
(w32-maximize-frame) 

;;空白干净的页面
(setq initial-scratch-message "") 

;;显示行数
(global-linum-mode t)
;;不生成备份文件
(setq make-backup-files nil)
;;跳转到某一行C-c C-g
(define-key global-map "\C-c\C-g" 'goto-line)

;;cedet
(load-file "~/.emacs.d/cedet/common/cedet.el")
(global-ede-mode 1)                      ; Enable the Project management system
(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion 
(global-srecode-minor-mode 1)            ; Enable template insertion menu
;;ECB
(add-to-list 'load-path "~/.emacs.d/ecb")
(load-file "~/.emacs.d/ecb/ecb.el")
(require 'ecb)
;; 自动启动ecb，并且不显示每日提示
(setq stack-trace-on-error t)
(setq ecb-auto-activate t
     ecb-tip-of-the-day nil)
;;禁用启动信息
(setq inhibit-startup-message t)
;;关闭烦人的出错时的提示声
(setq visible-bell t) 


;;; 各窗口间切换
(global-set-key [M-left] 'windmove-left)
(global-set-key [M-right] 'windmove-right)
(global-set-key [M-up] 'windmove-up)
(global-set-key [M-down] 'windmove-down)

;;;; 隐藏和显示ecb窗口
(define-key global-map [(control f1)] 'ecb-hide-ecb-windows)
(define-key global-map [(control f2)] 'ecb-show-ecb-windows)
(define-key global-map "\M-`" 'ecb-restore-default-window-sizes);;

;;;; 使某一ecb窗口最大化
(define-key global-map "\M-1" 'ecb-maximize-window-directories)
(define-key global-map "\M-2" 'ecb-maximize-window-sources)
(define-key global-map "\C-c3" 'ecb-maximize-window-methods)
(define-key global-map "\C-c4" 'ecb-maximize-window-history)
;;;; 恢复原始窗口布局

(put 'upcase-region 'disabled nil)

;;编程haskell支持
(load "~/.emacs.d/haskell-mode/haskell-site-file")

;;yasnippet
(add-to-list 'load-path "~/.emacs.d/yasnippet")
(require 'yasnippet)
(yas-global-mode 1)

;;编程Scala支持
(add-to-list 'load-path "~/.emacs.d/scala-mode")
(require 'scala-mode-auto) ;; 编辑.scala文件时自动启动scala mode

;;scala yasnippet
;;(setq yas/my-directory "~/.emacs.d/scala-mode/contrib/yasnippet/snippets")
;;(yas/load-directory yas/my-directory)
;;(add-hook 'scala-mode-hook
;;           '(lambda ()
;;               (yas/minor-mode-on)
;;               ))

;;Erlang Mode
(setq load-path (cons  "C:/Tools/erl/lib/tools-2.6.7/emacs" load-path)) 
(setq erlang-root-dir "C:/Tools/erl") 
(setq exec-path (cons "C:/Tools/erl/bin" exec-path)) 
(require 'erlang-start) 

;; This is needed for Distel setup 
(let ((distel-dir "~/.emacs.d/distel/elisp")) 
(unless (member distel-dir load-path) 
;; Add distel-dir to the end of load-path 
(setq load-path (append load-path (list distel-dir))))) 
(require 'distel) 
(distel-setup) 
;; Some Erlang customizations 
(add-hook 'erlang-mode-hook 
      (lambda () 
        ;; when starting an Erlang shell in Emacs, default in the node name 
        (setq inferior-erlang-machine-options '("-sname" "emacs")) 
        ;; add Erlang functions to an imenu menu 
        (imenu-add-to-menubar "imenu"))) 

(defconst distel-shell-keys 
'(("\C-\M-i"   erl-complete) 
("\M-?"      erl-complete)  
("\M-."      erl-find-source-under-point) 
("\M-,"      erl-find-source-unwind) 
("\M-*"      erl-find-source-unwind) 
)
 "Additional keys to bind when in Erlang shell.")

(add-hook 'erlang-shell-mode-hook  
   (lambda ()  
     ;; add some Distel bindings to the Erlang shell  
     (dolist (spec distel-shell-keys)  
       (define-key erlang-shell-mode-map (car spec) (cadr spec)))))  

;; 设置Tabbar
(add-to-list 'load-path "~/.emacs.d/tabbar") 
(require 'tabbar)  
(tabbar-mode 1)
(global-set-key [(meta j)] 'tabbar-backward)  
(global-set-key [(meta k)] 'tabbar-forward) 


(setq  
 tabbar-scroll-left-help-function nil   ;don't show help information  
 tabbar-scroll-right-help-function nil  
 tabbar-help-on-tab-function nil  
 tabbar-home-help-function nil  
 tabbar-buffer-home-button (quote (("") "")) ;don't show tabbar button  
 tabbar-scroll-left-button (quote (("") ""))  
 tabbar-scroll-right-button (quote (("") "")))  
  
  
(defun my-tabbar-buffer-groups ()  
  "Return the list of group names the current buffer belongs to.  
Return a list of one element based on major mode."  
  (list  
   (cond  
    ((or (get-buffer-process (current-buffer))  
         ;; Check if the major mode derives from `comint-mode' or  
         ;; `compilation-mode'.  
         (tabbar-buffer-mode-derived-p  
          major-mode '(comint-mode compilation-mode)))  
     "Process"  
     )  
    ((string-equal "*" (substring (buffer-name) 0 1))  
     "Emacs Buffer"  
     )  
    ((eq major-mode 'dired-mode)  
     "Dired"  
     )  
    (t  
     "User Buffer"  
     ))))  
  
(setq tabbar-buffer-groups-function 'my-tabbar-buffer-groups)
